"""
Django settings for agbado project.

Generated by 'django-admin startproject' using Django 5.1.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""
import os
from pathlib import Path

from decouple import config

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DEBUG', default=False, cast=bool) # Ensure DEBUG is cast to bool and has a default

ALLOWED_HOSTS = config('ALLOWED_HOSTS', cast=lambda v: [s.strip() for s in v.split(',')], default='*')

# Application definition

INSTALLED_APPS = [
    # --- ADD CLOUDINARY APPS ---
    'cloudinary',
    'cloudinary_storage',
    # --- END CLOUDINARY APPS ---
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'auth_app',
    'user_app',
    'provider_app',
    'wallet_app',
    'service_app',
    'notification_app',
    'social_django',
    'corsheaders',
    'rest_framework', # Add this for DRF setup
    'rest_framework.authtoken',
    # 'coreapi', # Coreapi for coreapi documentation
    # 'drf_yasg', # drf_yasg for Swagger documentation
    'channels',
    'django_filters',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'corsheaders.middleware.CorsMiddleware', # IMPORTANT: Place this high up, usually after SecurityMiddleware
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    # 'django.middleware.csrf.CsrfViewMiddleware', # Uncomment if you need CSRF protection (e.g., for Django forms)
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.http.ConditionalGetMiddleware',
    'django.middleware.common.BrokenLinkEmailsMiddleware', # Often can be removed if not needed
]

ROOT_URLCONF = 'agbado.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'social_django.context_processors.backends', # For social_django
                'social_django.context_processors.login_redirect', # For social_django
            ],
        },
    },
]

WSGI_APPLICATION = 'agbado.wsgi.application'

# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

# It's better to configure DATABASES using DATABASE_URL or similar for production
# and a local sqlite for development.

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.mysql',
#         'NAME': config('DB_NAME'),
#         'USER': config('DB_USER'),
#         'PASSWORD': config('DB_PASSWORD'),
#         'HOST': config('DB_HOST', default='localhost'),
#         'PORT': config('DB_PORT', default='3306', cast=int), # Cast port to int
#     }
# }

# --- Cloudinary Configuration ---
CLOUDINARY_STORAGE = {
    'CLOUD_NAME': config('CLOUDINARY_CLOUD_NAME'),
    'API_KEY': config('CLOUDINARY_API_KEY'),
    'API_SECRET': config('CLOUDINARY_API_SECRET'),
    'SECURE': True, # Ensure secure URLs (HTTPS)
    # Optional: Set a folder for your static files on Cloudinary
    'STATIC_FOLDER': 'static', # This will put your static files in a 'static' folder on Cloudinary
    # Optional: Set a folder for your media files on Cloudinary
    'MEDIA_FOLDER': 'media', # This will put your media files in a 'media' folder on Cloudinary
}

# Default File Storage for Media Files (e.g., user uploads)
# This ensures that files uploaded via Django models (ImageField, FileField)
# will be directly uploaded to Cloudinary.
DEFAULT_FILE_STORAGE = 'cloudinary_storage.storage.MediaCloudinaryStorage'

# Static Files Storage (used by collectstatic command)
# This tells Django to use Cloudinary for static files when collectstatic is run.
STATICFILES_STORAGE = 'cloudinary_storage.storage.StaticCloudinaryStorage'

# Standard Django STATIC_URL and MEDIA_URL
# These are used by Django to build URLs for your files.
# CloudinaryStorage will override the actual URL generation to point to Cloudinary.
STATIC_URL = '/static/'
MEDIA_URL = '/media/'

# STATIC_ROOT is where `collectstatic` will gather files locally *before* they are
# uploaded to Cloudinary by `STATICFILES_STORAGE`. This directory will be created
# by `collectstatic` and is typically used for local development/testing.
# For production with Cloudinary, this can be a temporary staging area.
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles_build')

MEDIA_URL = '/media/'  # or any prefix you choose
# MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# STATIC_ROOT is where `collectstatic` will gather files locally before uploading to Cloudinary
# It's needed for `collectstatic` to work with Cloudinary.
# STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# Optional: If you had local media files you wanted to manage before Cloudinary
# MEDIA_ROOT = os.path.join(BASE_DIR, "media")

# Email
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_HOST_USER = config('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = config('EMAIL_HOST_PASSWORD')
EMAIL_PORT = config('EMAIL_PORT', cast=int) # Ensure port is an integer
EMAIL_USE_TLS = True
DEFAULT_FROM_EMAIL = 'no-reply@yourapp.com' # Change to your actual sender email

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

REST_FRAMEWORK = {
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 10, # You can adjust the page size based on your requirements
    'DEFAULT_FILTER_BACKENDS': ('django_filters.rest_framework.DjangoFilterBackend',),
    # 'DEFAULT_AUTHENTICATION_CLASSES': [
    # 'rest_framework.authentication.TokenAuthentication', # For token-based authentication
    # ],
    # 'DEFAULT_PERMISSION_CLASSES': [
    # 'rest_framework.permissions.IsAuthenticated', # Ensure only authenticated users can access the API
    # ],
    # 'DEFAULT_RENDERER_CLASSES': [
    # 'rest_framework.renderers.JSONRenderer', # Ensure seamless communication with the mobile app
    # ],
}

# Security Headers (Good for production)
SECURE_SSL_REDIRECT = config('SECURE_SSL_REDIRECT', default=False, cast=bool) # Use config for production
SECURE_HSTS_SECONDS = config('SECURE_HSTS_SECONDS', default=0, cast=int) # Use config for production
SECURE_HSTS_INCLUDE_SUBDOMAINS = config('SECURE_HSTS_INCLUDE_SUBDOMAINS', default=False, cast=bool) # Use config for production
SECURE_HSTS_PRELOAD = config('SECURE_HSTS_PRELOAD', default=False, cast=bool) # Use config for production
SECURE_BROWSER_XSS_FILTER = True
SECURE_CONTENT_TYPE_NOSNIFF = True
X_FRAME_OPTIONS = 'DENY'
SECURE_REFERRER_POLICY = 'no-referrer-when-downgrade'
CSRF_COOKIE_SECURE = config('CSRF_COOKIE_SECURE', default=False, cast=bool) # Use config for production
SESSION_COOKIE_SECURE = config('SESSION_COOKIE_SECURE', default=False, cast=bool) # Ensure session cookies are secure

# CORS Headers Configuration
# IMPORTANT: DO NOT use CORS_ALLOW_ALL_ORIGINS = True in production.
CORS_ALLOW_ALL_ORIGINS = config('CORS_ALLOW_ALL_ORIGINS', default=False, cast=bool)

if not CORS_ALLOW_ALL_ORIGINS:
    CORS_ALLOWED_ORIGINS = config('CORS_ALLOWED_ORIGINS', cast=lambda v: [s.strip() for s in v.split(',')], default='')
    CORS_ALLOWED_ORIGIN_REGEXES = config('CORS_ALLOWED_ORIGIN_REGEXES', cast=lambda v: [s.strip() for s in v.split(',')], default='')


CORS_ALLOW_CREDENTIALS = True # Only if cookies or credentials are needed

# Channels
ASGI_APPLICATION = 'agbado.asgi.application'

CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels_redis.core.RedisChannelLayer',
        'CONFIG': {
            "hosts": [("127.0.0.1", 6379)], # Adjust for production Redis URL
        },
    },
}

AUTH_USER_MODEL = 'auth_app.User'

TERMII_LIVE_KEY = config('TERMII_LIVE_KEY')

DATA_UPLOAD_MAX_MEMORY_SIZE = 10485760 # 10 MB
FILE_UPLOAD_MAX_MEMORY_SIZE = 10485760 # 10 MB

# WebAuthn/FIDO2 Settings
# This is the domain name of your application. Use "localhost" for local development.
# For production, this MUST be your actual domain (e.g., "your-app.com").
# RP_ID binds the credential to your origin, preventing phishing.
WEBAUTHN_RP_ID = config('WEBAUTHN_RP_ID', default="localhost") # Use config for flexibility
WEBAUTHN_RP_NAME = config('WEBAUTHN_RP_NAME', default="AGBA-DO") # Use config for flexibility
WEBAUTHN_ORIGINS = config('WEBAUTHN_ORIGINS', cast=lambda v: [s.strip() for s in v.split(',')], default="http://localhost:8000,http://127.0.0.1:8000") # Use config for flexibility

